--- a/lib/sort.c
+++ a/lib/sort.c
@@ -213,7 +213,6 @@
 	/* pre-scale counters for performance */
 	size_t n = num * size, a = (num/2) * size;
 	const unsigned int lsbit = size & -size;  /* Used to find parent */
-	size_t shift = 0;
 
 	if (!a)		/* num < 2 || size == 0 */
 		return;
@@ -241,18 +240,12 @@
 	for (;;) {
 		size_t b, c, d;
 
-		if (a)			/* Building heap: sift down a */
-			a -= size << shift;
-		else if (n > 3 * size) { /* Sorting: Extract two largest elements */
-			n -= size;
+		if (a)			/* Building heap: sift down --a */
+			a -= size;
+		else if (n -= size)	/* Sorting: Extract root to --n */
 			do_swap(base, base + n, size, swap_func, priv);
-			shift = do_cmp(base + size, base + 2 * size, cmp_func, priv) <= 0;
-			a = size << shift;
-			n -= size;
-			do_swap(base + a, base + n, size, swap_func, priv);
-		} else {		/* Sort complete */
+		else			/* Sort complete */
 			break;
-		}
 
 		/*
 		 * Sift element at "a" down into heap.  This is the
@@ -280,11 +273,6 @@
 			do_swap(base + b, base + c, size, swap_func, priv);
 		}
 	}
-
-	n -= size;
-	do_swap(base, base + n, size, swap_func, priv);
-	if (n == size * 2 && do_cmp(base, base + size, cmp_func, priv) > 0)
-		do_swap(base, base + size, size, swap_func, priv);
 }
 EXPORT_SYMBOL(sort_r);
 
